The component will run in a par with the following function which does not terminate.

<code>

    void pwmSingleBitPort(chanend c, clock clk,
                          out buffered port:32 p[], 
                          unsigned int numPorts, 
                          unsigned int resolution, 
                          unsigned int timeStep
                          unsigned int mod_type);

</code>

This function starts the pwm server and passes it a channel with which it will communicate with the client, a clock block required for the clocking of the required ports, an array of ports on which the pwm signals will be generated, and the number of ports in the array. 


The resolution specifes the number of levels permitted in the pwm, thus a resolution of 64 will provide 64 distinct levels, and a resolution of 1024 will provide 1024 distinct levels (i.e. equivalent to 10-bits resolution).

The value "timestep" configures the duration of each pwm bit. A timestep of zero causes 1 LSB to take 10ns. A timestep of 1 causes 1 LSB to take 20ns. A timestep of 2 causes 1 LSB to take 40ns, etc. up to a maximum value of 256.

For timesteps above 0, the period can be calculated as follows:

period = 20*timeStep*resolution

The mod_type configures the PWM edge variations
1 --> Lead Edge, 2 -- > Tail Edge, 3 --> Centred variations


-----

<code>
    void setDutyCycle(chanend c, unsigned int dutyCycle[], unsigned int numPorts);
</code>

The client uses this function to give the pwm server a new set of duty cycles, one for  each of the ports in use. The server will then continue to output at that value until this function is called again.
